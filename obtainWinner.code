import "hashes/sha256/512bitPacked.code" as sha256

<<<<<<< HEAD
//Private field are the decrypted bids by the auctioner with the private key. Public keys are the hashes provided by the bidders and stored in the Smart Contract.
def main(private field a, private field b, private field c, private field d, field[2] e, field[2] f, field[2] g, field[2] h) -> (field[4], field, field):
    //Hashing the decrypted bids for comparing these hashes with the public ones provided as inputs, and in the Auction Smart Contract
    field[2] hashA = sha256([0,0,0,a])
    field[2] hashB = sha256([0,0,0,b])
    field[2] hashC = sha256([0,0,0,c])
    field[2] hashD = sha256([0,0,0,d])
=======
def main(private field[4] a, private field[4] b, private field[4] c, private field[4] d, field[2] e, field[2] f, field[2] g, field[2] h) -> (field, field[4], field):
    //Hashing the bids for comparing these hashes with the public ones provided as inputs
    field[2] hashA = sha256(a)
    field[2] hashB = sha256(b)
    field[2] hashC = sha256(c)
    field[2] hashD = sha256(d)
>>>>>>> d583f5c33176c108bb8cae6ad79e23c193189037

    //Comparison between the hashes provided as inputs and the ones calculated before
    field hashCheckedA = if hashA[0] == e[0] && hashA[1] == e[1] then 1 else 0 fi
    field hashCheckedB = if hashB[0] == f[0] && hashB[1] == f[1] then 1 else 0 fi
    field hashCheckedC = if hashC[0] == g[0] && hashC[1] == g[1] then 1 else 0 fi
    field hashCheckedD = if hashD[0] == h[0] && hashD[1] == h[1] then 1 else 0 fi

    //Array whose values are 1 or 0s, indicating if the hashes and amounts were correct or not
    field[4] allCheckedHashesResults = [hashCheckedA, hashCheckedB, hashCheckedC, hashCheckedD]

    //Obtaining the values of the bids in case that hashes were correct
<<<<<<< HEAD
    field bidA = if hashCheckedA == 1 then a else 0 fi
    field bidB = if hashCheckedB == 1 then b else 0 fi
    field bidC = if hashCheckedC == 1 then c else 0 fi
    field bidD = if hashCheckedD == 1 then d else 0 fi
=======
    field bidA = if hashCheckedA == 1 then a[0]*1000 + a[1]*100 + a[2]*10 + a[3] else 0 fi
    field bidB = if hashCheckedB == 1 then b[0]*1000 + b[1]*100 + b[2] *10 + b[3] else 0 fi
    field bidC = if hashCheckedC == 1 then c[0]*1000 + c[1]*100 + c[2] *10 + c[3] else 0 fi
    field bidD = if hashCheckedD == 1 then d[0]*1000 + d[1]*100 + d[2] *10 + d[3] else 0 fi
>>>>>>> d583f5c33176c108bb8cae6ad79e23c193189037

    //Array for looping all the bids
    field[4] allBids = [bidA, bidB, bidC, bidD]
    //Variable for saving the highestBid
    field highestBid = 0
    //Variable for saving the position of the winner array and retrieve the address
    field position = 0

    //For loop for obtaining the highest bid
    for field i in 0..4 do 
        field j = 3-i
        position = if highestBid < allBids[j] then j else position fi
        highestBid = if highestBid < allBids[j] then allBids[j] else highestBid fi
        
    endfor

    //Return values of the highest bid and the result of comparing the hashes, and the position for retrieving the position of arrays
<<<<<<< HEAD
    return allCheckedHashesResults, position, highestBid
=======
    return highestBid, allCheckedHashesResults, position
>>>>>>> d583f5c33176c108bb8cae6ad79e23c193189037
